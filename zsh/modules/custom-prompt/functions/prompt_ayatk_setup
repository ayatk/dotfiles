#! /bin/env zsh

#
# A colorful, friendly, multiline theme with some handy features.
#
# Authors:
#   ayatk
#

# Load dependencies.
pmodload 'helper'

function ls_abbrev {
  if [[ ! -r $PWD ]]; then
    return
  fi
  # -A : Do not ignore entries starting with ..
  # -C : Force multi-column output.
  # -F : Append indicator (one of */=>@|) to entries.
  local ls_result=$(CLICOLOR_FORCE=1 ls -ACF)
  local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

  if [ $ls_lines -gt 10 ]; then
    echo "$ls_result" | head -n 5
    echo '...'
    echo "$ls_result" | tail -n 5
    echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
  else
    echo "$ls_result"
  fi
}

# https://qiita.com/yuyuchu3333/items/e9af05670c95e2cc5b4d
function do_enter {
  if [ -n "$BUFFER" ]; then
    zle accept-line
    return 0
  fi
  echo
  ls_abbrev
  echo
  if (($ + $(git rev-parse --is-inside-work-tree 2>/dev/null))); then
    echo -e "\e[0;33m--- git status ---\e[0m"
    git status -sbu
    echo
  fi
  zle reset-prompt
}

function _chpwd {
  if [[ $PWD != $HOME ]]; then
    ls_abbrev
  fi
}

function +vi-git_precmd {
  # Check for untracked files, since vcs_info does not.
  if [[ -n $(git ls-files --other --exclude-standard 2>/dev/null) ]]; then
    hook_com[unstaged]+='%F{green}?%f'
  fi
}

function prompt_ayatk_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_ayatk_pwd=$(prompt-pwd)

  # Handle updating git data. We also clear the git prompt data if we're in a
  # different git root now.
  if (( $+functions[git-dir] )); then
    local new_git_root="$(git-dir 2> /dev/null)"
    if [[ $new_git_root != $_ayatk_cur_git_root ]]; then
      _prompt_ayatk_git=''
      _ayatk_cur_git_root=$new_git_root
    fi
  fi

  prompt_ayatk_async_tasks
}

function iterm2_prompt_mark {
  printf ""
}

function prompt_ayatk_async_callback {
  case $1 in
    prompt_ayatk_async_git)
      # We can safely split on ':' because it isn't allowed in ref names.
      IFS=':' read _git_target _git_post_target <<<"$3"

      # The target actually contains 3 space separated possibilities, so we need to
      # make sure we grab the first one.
      _git_target=$(coalesce ${(@)${(z)_git_target}})

      if [[ -z "$_git_target" ]]; then
        # No git target detected, flush the git fragment and redisplay the prompt.
        if [[ -n "$_prompt_ayatk_git" ]]; then
          _prompt_ayatk_git=''
          zle && zle reset-prompt
        fi
      else
        # Git target detected, update the git fragment and redisplay the prompt.
        _prompt_ayatk_git="${_git_target}${_git_post_target}"
        zle && zle reset-prompt
      fi
      ;;
  esac
}

function prompt_ayatk_async_git {
  cd -q "$1"
  if (( $+functions[git-info] )); then
    git-info
    print ${git_info[status]}
  fi
}

function prompt_ayatk_async_tasks {
  # Initialize async worker. This needs to be done here and not in
  # prompt_ayatk_setup so the git formatting can be overridden by other prompts.
  if (( !${prompt_prezto_async_init:-0} )); then
    async_start_worker prompt_ayatk -n
    async_register_callback prompt_ayatk prompt_ayatk_async_callback
    typeset -g prompt_prezto_async_init=1
  fi

  # Kill the old process of slow commands if it is still running.
  async_flush_jobs prompt_ayatk

  # Compute slow commands in the background.
  async_job prompt_ayatk prompt_ayatk_async_git "$PWD"
}

function prompt_ayatk_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz async && async

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_ayatk_precmd
  add-zsh-hook chpwd _chpwd

  # Tell prezto we can manage this prompt
  zstyle ':prezto:module:prompt' managed 'yes'

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{green}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{red}❯%F{yellow}❯%F{green}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{green}❮%F{yellow}❮%F{red}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format '%F{7}:%f%%B%F{9}%s%f%%b'
  zstyle ':prezto:module:git:info:added' format ' %%B%F{2}＋%f%%b'
  zstyle ':prezto:module:git:info:ahead' format ' %%B%F{13}↑%f%%b'
  zstyle ':prezto:module:git:info:behind' format ' %%B%F{13}↓%f%%b'
  zstyle ':prezto:module:git:info:branch' format ' %%B%F{2}%b%f%%b'
  zstyle ':prezto:module:git:info:commit' format ' %%B%F{3}%.7c%f%%b'
  zstyle ':prezto:module:git:info:deleted' format ' %%B%F{1}×%f%%b'
  zstyle ':prezto:module:git:info:modified' format ' %%B%F{4}＊%f%%b'
  zstyle ':prezto:module:git:info:position' format ' %%B%F{13}%p%f%%b'
  zstyle ':prezto:module:git:info:renamed' format ' %%B%F{5}→%f%%b'
  zstyle ':prezto:module:git:info:stashed' format ' %%B%F{6}☆%f%%b'
  zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{3}＝%f%%b'
  zstyle ':prezto:module:git:info:untracked' format ' %%B%F{7}■%f%%b'
  zstyle ':prezto:module:git:info:keys' format 'status' '%b %p %c:%s%A%B%S%a%d%m%r%U%u'

  # Get the async worker set up.
  _ayatk_cur_git_root=''

  _prompt_ayatk_git=''
  _prompt_ayatk_pwd=''

  # Define prompts.
  PROMPT=$'%(?..%F{red}%B==> [%?]%b%f\n)'
  PROMPT+=$'${SSH_TTY:+"%F{9}%n%f%F{7}@%f%F{3}%m%f "}%F{4}${_prompt_ayatk_pwd}%(!. %B%F{1}#%f%b.)  ${_prompt_ayatk_git}\n'
  PROMPT+='${editor_info[keymap]} '

  RPROMPT='${editor_info[overwrite]}%(?:: %F{1}'
  RPROMPT+='${VIM:+" %B%F{6}V%f%b"}'
  SPROMPT="%{$suggest%}(*´-A-%)? < %F{magenta}%R%f はもしかして %F{green}%r%f かな? [そう!(y),違う!(n),a,e]: "
}

function prompt_ayatk_preview {
  local +h PROMPT=''
  local +h RPROMPT=''
  local +h SPROMPT=''

  editor-info 2> /dev/null
  prompt_preview_theme 'ayatk'
}

prompt_ayatk_setup "$@"
# vim: ft=zsh
